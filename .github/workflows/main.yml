name: main
permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  testing:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88
      - name: Install Cargo Tools
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack@0.4.7
      - name: Build
        run: cargo hack build --each-feature --verbose
      - name: Tests
        run: cargo test --verbose
      - name: Doc Tests
        run: cargo test --doc --verbose

  static-analysis:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88
          components: clippy, rustfmt
      - name: Install Rust Nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: miri
      - name: Install Cargo Tools
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit@0.21.2, cargo-udeps@0.1.57, cargo-rdme@1.4.8, cargo-workspaces@0.4.0
      - name: Clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings
      - name: Audit
        run: cargo audit
      - name: Format
        run: cargo fmt -- --check
      - name: Docs
        run: cargo doc --no-deps --workspace --all-features
      - name: Udeps
        run: cargo +nightly udeps --all-features --workspace
      - name: Readme
        run: cargo workspaces exec cargo rdme --check --no-fail-on-warnings
      - name: Miri
        run: cargo +nightly miri test --all-features --workspace

  pr-title-check:
    runs-on: ubuntu-latest
    # The action only works for pull requests
    if: github.event_name == 'pull_request'
    steps:
      - name: Conventional Commits
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            doc
            task
            style
            perf
            refactor
            test

  mutation-testing:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88
          components: clippy, rustfmt
      - name: Install Cargo Tools
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-mutants@25.3.1, cargo-udeps@0.1.57
      - name: Mutate
        run: cargo mutants --test-workspace=true --colors=never --jobs=2 --build-timeout=120 --cap-lints=true

  coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust Nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: llvm-tools-preview
      - name: Install Cargo Tools
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov@0.6.18
      - name: Generate Coverage (all-features)
        run: cargo +nightly llvm-cov --all-features --workspace --tests --lcov --output-path lcov.info
      - name: Generate Coverage (no-default-features)
        run: cargo +nightly llvm-cov --no-default-features --workspace --tests --lcov --output-path lcov.info
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true
