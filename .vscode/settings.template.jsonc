// We do not commit the VS Code settings.json file to the repository because many of the settings
// are personal preferences. Instead, we provide a template file that can be customized as needed.
//
// Copy this file to `.vscode/settings.json` in the workspace and modify it as desired.
// None of these settings are critical for the project to work, they merely exist to assist you.

{
    // ###########################################################################################
    // # Unified configuration - this chapter contains things that should match for all engineers.
    //
    // These settings are not critical but may give you improved performance, better IDE experience and
    // reduce manual labor when unifying/reviewing code style (especially code generated by IDE).
    //
    // We would really prefer to commit these into the repo but that is
    // blocked by https://github.com/microsoft/vscode/issues/255775.

    // Performance: use a separate Cargo target directory for rust-analyzer and ad-hoc commands.
    // This minimizes filesystem locking when executing cargo commands in parallel to VS Code.
    "rust-analyzer.cargo.targetDir": true,

    // The point here is to remove "miri" from the list because otherwise VS Code will simply
    // keep all #[cfg(not(miri))] tests forever grayed out, which makes the IDE useless in them.
    // We can consider it a bugfix to the default settings the extension comes with.
    "rust-analyzer.cargo.cfgs": [
        // Part of default set.
        "debug_assertions"
    ],

    // Code style: use `crate` instead of `super` for rust-analyzer generated imports.
    "rust-analyzer.imports.prefix": "crate",

    // Code style: automatically format Rust code on save to save manual labor.
    "[rust]": {
        "editor.defaultFormatter": "rust-lang.rust-analyzer",
        "editor.formatOnSave": true
    },

    // Ensure Copilot uses our standard instructions file when using the integrated
    // "Review this code" feature of VS Code. This setting has no effect in chat mode.
    "github.copilot.chat.reviewSelection.instructions": [
        {
            "file": ".github/copilot-instructions.md"
        }
    ],

    // ###########################################################################################
    // # Personal preferences
    //
    // Some suggestions are included here when there are workspace-specific considerations that
    // may make a setting desirable or when the specific incantation is not easy to
    // come up with and would otherwise require some time-consuming experimentation.

    // Rust-analyzer default behavior skips checking/building some parts of the Rust codebase.
    // This makes it check and build everything, which can help discover issues sooner, instead of
    // only in the pull request validation build. It does make the checking/building slower, though.
    "rust-analyzer.cargo.features": "all",
    "rust-analyzer.check.features": "all",
    "rust-analyzer.cargo.allTargets": true,
    "rust-analyzer.check.allTargets": true,

    // The (ms-)nightly toolchain has additional code formatting capabilities that are disabled
    // with the regular toolchain. This enables those capabilities.
    //
    // Requires the ms-nightly toolchain to be installed. You may need to install it manually, as
    // it may not be installed by default (`msrustup toolchain install ms-nightly`).
    "rust-analyzer.rustfmt.extraArgs": ["+ms-nightly", "--config-path", "${workspaceFolder}/unstable-rustfmt.toml"],

    // Clippy is extremely slow when used on our large workspace, so you may want to use
    // `check` instead to run regular `cargo check`. To run Clippy, invoke it manually from the
    // VS Code command palette (`Run Task` -> `rust: Clippy`).
    "rust-analyzer.check.command": "check",

    // Whether to run check/Clippy on:
    // 1. true - the entire workspace; or
    // 2. false - only current package and its dependencies.
    "rust-analyzer.check.workspace": false

    // ###########################################################################################
    // # End of configuration template.
}
