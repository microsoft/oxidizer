[workspace]
resolver = "3"
members = ["crates/oxidizer_time", "crates/oxidizer_rt", "crates/oxidizer_io", "crates/oxidizer_mem", "crates/oxidizer_macros", "crates/oxidizer_macros_impl", "crates/oxidizer_testing", "crates/isolated_domains", "crates_internal/oxidizer_time_tests", "crates_internal/oxidizer_rt_testing"]

[workspace.package]
edition = "2024"
rust-version = "1.85"
authors = []
license-file = "LICENSE.txt"
description = "Framework for Rust microservices at scale"
readme = "README.md"
homepage = "https://github.com/microsoft/oxidizer"
repository = "https://github.com/microsoft/oxidizer"
keywords = ["Rust", "microservices"]
categories = ["sdk", "framework", "library"]
publish = ["crates-io"]
# Base pre-release version identifier must stay -dev and not moved to -main/-master.
# Otherwise, will not be possible to create ad-hoc builds with the -dev suffix without doing more gymnastics.
# This version is used for all crates in the workspace. It is in sync with .pipelines/variables/version.yml for master branch CI.
version = "0.10.0-dev"

[workspace.dependencies]
oxidizer_mem = { path = "crates/oxidizer_mem", version = "=0.10.0-dev" }
oxidizer_io = { path = "crates/oxidizer_io", version = "=0.10.0-dev" }
oxidizer_macros = { path = "crates/oxidizer_macros", version = "=0.10.0-dev" }
oxidizer_macros_impl = { path = "crates/oxidizer_macros_impl", version = "=0.10.0-dev" }
oxidizer_rt = { path = "crates/oxidizer_rt", version = "=0.10.0-dev" }
oxidizer_testing = { path = "crates/oxidizer_testing", version = "=0.10.0-dev" }
oxidizer_time = { path = "crates/oxidizer_time", version = "=0.10.0-dev" }
isolated_domains = { path = "crates/isolated_domains", version = "=0.10.0-dev" }

# external packages
# run `just rank-crates` and paste the output here to prune obsolete entries without any references

anyhow = { version = "1.0.95" }
argh = { version = "0.1.13" }
arrayvec = { version = "0.7.6", default-features = false }
async-broadcast = "0.7.2"
async-channel = { version = "2.3.1" }
async-io = { version = "2.4.0" }
async-lock = { version = "3.4.0" }
async-observable = { version = "0.4.2" }
async-std = { version = "1.13.0" }
async-trait = { version = "0.1.85" }
base64 = { version = "0.22.1" }
bon = { version = "3.3.2" }
bytes = { version = "1.9.0" }
# no-recent-updates
cfg-if = { version = "1.0" }
chrono = { version = "0.4.40" }
chrono-tz = { version = "0.10.0" }
cmd_lib = { version = "1.9.5" }
const-hex = { version = "1.14.0" }
const-oid = { version = "0.9.6" }
criterion = { version = "0.6.0" }
culpa = { version = "1.0.2" }
darling = { version = "0.20.10" }
derive-getters = { version = "0.5.0" }
derive_builder = { version = "0.20.2" }
derive_more = { version = "2.0.1", default-features = false }
dynosaur = { version = "0.2.0", default-features = false }
futures = { version = "0.3.31", default-features = false }
futures-util = { version = "0.3.31" }
gethostname = { version = "1.0.0" }
glob = { version = "0.3.2" }
heapless = { version = "0.8.0" }
honggfuzz = { version = "0.5.56" }
http = { version = "1.2.0" }
http-body = { version = "1.0.1" }
http-body-util = { version = "0.1.2" }
hyper = { version = "1.5.2", default-features = false }
hyper-rustls = { version = "0.27.6", default-features = false }
hyper-util = { version = "0.1.10" }
ignore = { version = "0.4.23" }
insta = { version = "1.42.0" }
itertools = { version = "0.14.0" }
jiff = { version = "0.2.0", default-features = false }
# low-download-count
jsonformat = { version = "2.0.0" }
log = { version = "0.4.21" }
many_cpus = { version = "0.3.1" }
# no-recent-updates
mappable-rc = { version = "0.1.1" }
mockall = { version = "0.13.1" }
mockall_double = { version = "0.3.1" }
# no-recent-updates
mutants = { version = "0.0.3" }
# low-download-count
negative-impl = { version = "0.1.6" }
nonempty = { version = "0.11.0" }
notify = { version = "8.0.0" }
num-bigint = { version = "0.4.6" }
oneshot = { version = "0.1.8" }
opentelemetry = { version = "0.29.1", default-features = false }
opentelemetry-appender-log = { version = "0.29.0" }
opentelemetry-appender-tracing = { version = "0.29.1" }
# low-download-count
opentelemetry-etw-metrics = { version = "0.8.0", default-features = false }
opentelemetry-stdout = { version = "0.29.0", default-features = false }
opentelemetry_sdk = { version = "0.29.0", default-features = false }
opentelemetry-semantic-conventions = { version = "0.29.0", default-features = false }
pin-project = { version = "1.1.8" }
prettyplease = { version = "0.2.29" }
proc-macro2 = { version = "1.0.93" }
prost = { version = "0.13.4" }
prost-build = { version = "0.13.4" }
prost-types = { version = "0.13.4" }
protox = { version = "0.8.0" }
# no-recent-updates
quickcheck = { version = "1.0.3", default-features = false }
# no-recent-updates
quickcheck_macros = { version = "1.0.0" }
quote = { version = "1.0.38" }
rand = { version = "0.9.0" }
rcgen = { version = "0.13.2", default-features = false }
regex = { version = "1.11.1" }
reqwest = { version = "0.12.12", default-features = false }
reqwest-middleware = { version = "0.4.0" }
reqwest-retry = { version = "0.7.0" }
rustls = { version = "0.23.21", default-features = false }
# low-download-count
rustls-symcrypt = { version = "0.2.1", default-features = false }
schannel = { version = "0.1.27" }
scopeguard = { version = "1.2.0" }
smallvec = { version = "1.15.1" }
semver = { version = "1.0.25" }
serde = { version = "1.0.217", default-features = false }
serde-aux = { version = "4.5.0" }
serde_json = { version = "1.0.135" }
# no-recent-updates
static_assertions = { version = "1.1.0" }
strum = { version = "0.27.0" }
strum_macros = { version = "0.27.0" }
# low-download-count
symcrypt = { version = "0.5.1" }
# low-download-count
symcrypt-sys = { version = "0.4.0" }
syn = { version = "2.0.96", default-features = false }
tempfile = { version = "3.15.0" }
thiserror = { version = "2.0.11" }
# no-recent-updates
threadpool = { version = "1.8.0" }
time = { version = "0.3.37" }
time-tz = { version = "2.0.0" }
tokio = { version = "1.44.2", default-features = false }
tokio-stream = { version = "0.1.17" }
toml = { version = "0.8.23" }
toml_edit = { version = "0.22.27" }
tonic = { version = "0.12.3", default-features = false }
tower = { version = "0.5.2" }
tracing = { version = "0.1.41" }
tracing-appender = { version = "0.2.3" }
tracing-subscriber = { version = "0.3.19" }
trait-variant = { version = "0.1.2" }
trybuild = { version = "1.0.101" }
url = { version = "2.5.4" }
uuid = { version = "1.11.0" }
widestring = { version = "1.1.0" }
windows = { version = "0.61.1" }
windows-sys = { version = "0.59.0" }
wiremock = { version = "0.6.3", default-features = false }
x509-parser = { version = "0.17.0" }
yasna = { version = "0.5.2" }

# Oxidizer aggressively uses lints to drive up the quality of the code base and of the product.
#
# These lints exist to help you and are not absolute rules - a lint error just means it is typically not
# a good idea or may need special care. Where justified, feel free to suppress a lint.
#
# Lint sources:
#   * Rust compiler: https://doc.rust-lang.org/rustc/lints/listing/index.html
#   * Clippy: https://rust-lang.github.io/rust-clippy/master/index.html
#   * Rustdoc: https://doc.rust-lang.org/rustdoc/lints.html
#
# # HOW TO SUPPRESS LINTS
#
# The preferred suppression format is:
#
# #[expect(clippy::map_err_ignore, reason = "original error is useless information here")]
#
# Specifically this means:
# * Always specify a reason inline in the attribute. There is a lint that checks for this.
#     * A good reason convinces the next reader, so it should not only be an assertion. Instead of
#       "This is safe, trust me" explain in the reason text why exactly something is fine to do.
# * Prefer `expect` so the lint not triggering is itself a warning, allowing us to clean up unneeded suppressions.
#
# It is fine to use `#[allow]` if `#[expect]` complicates maintenance, though you will then also
# need to justify this choice by suppressing `allow_attributes` which wants you to use `#[expect]`
# instead.
#
# If the justification for using `#[allow]` is that a lint only fails with certain build
# configurations, better options may be available. Consider using conditional `#[expect]` instead:
#
# #[cfg_attr(
#      feature = "foo",
#      expect(
#          clippy::unused_self,
#          reason = "feature 'foo' does not require using self but we need to stick to common API"
#     )
# )]
#
# It is fine to blanket-apply suppressions to large parts of the module tree via `#![allow]`.
# Outer attributes do not require using `#[expect]` since they by design cover large territory
# that does not need to be fine-tuned with specific expectations.

[workspace.lints.rust]
ambiguous_negative_literals = "warn"
missing_debug_implementations = "warn"
redundant_imports = "warn"
redundant_lifetimes = "warn"
trivial_numeric_casts = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_lifetimes = "warn"

[workspace.lints.clippy]
cargo = { level = "warn", priority = -1 }
complexity = { level = "warn", priority = -1 }
correctness = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
perf = { level = "warn", priority = -1 }
style = { level = "warn", priority = -1 }

# Lints that not enabled by categories above but are still useful.
# These lints are from `restriction` group.
allow_attributes_without_reason = "warn"
as_pointer_underscore = "warn"
assertions_on_result_states = "warn"
clone_on_ref_ptr = "warn"
deref_by_slicing = "warn"
disallowed_script_idents = "warn"
empty_drop = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
fn_to_numeric_cast_any = "warn"
if_then_some_else_none = "warn"
map_err_ignore = "warn"
multiple_unsafe_ops_per_block = "warn"
redundant_type_annotations = "warn"
renamed_function_params = "warn"
semicolon_outside_block = "warn"
string_to_string = "warn"
undocumented_unsafe_blocks = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unneeded_field_pattern = "warn"
unused_result_ok = "warn"

# lints that are temporarily disabled until all offenders are purged from the source tree
future_not_send = "allow"
missing_errors_doc = "allow"
missing_const_for_fn = "allow"

# this lint is disabled because for some reason, it produces warnings on the clippy.toml file!
literal-string-with-formatting-args = "allow"

[workspace.lints.rustdoc]
